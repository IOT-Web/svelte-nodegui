(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{133:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return g}));var o=t(0),a=t.n(o);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=d(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},b=a.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),b=o,g=u["".concat(r,".").concat(b)]||u[b]||p[b]||i;return t?a.a.createElement(g,s(s({ref:n},c),{},{components:t})):a.a.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=b;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=t[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return r})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return d}));var o=t(2),a=t(6),i=(t(0),t(133)),r={sidebar_label:"Handle Events",title:"Handle Events"},s={unversionedId:"guides/handle-events",id:"guides/handle-events",isDocsHomePage:!1,title:"Handle Events",description:"Svelte NodeGui allows you to listen to various events that might originate from the underlying Qt widgets. These events can either be a simple button click or a text change on a LineEdit or even something like window being hidden and shown.",source:"@site/docs/guides/handle-events.md",slug:"/guides/handle-events",permalink:"/docs/guides/handle-events",version:"current",sidebar_label:"Handle Events",sidebar:"guides",previous:{title:"Layout",permalink:"/docs/guides/layout"},next:{title:"Scroll Area",permalink:"/docs/guides/scroll-view"}},l=[{value:"Event handling",id:"event-handling",children:[{value:"How do I know which events are supported ?",id:"how-do-i-know-which-events-are-supported-",children:[]}]}],c={rightToc:l};function d(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Svelte NodeGui allows you to listen to various events that might originate from the underlying Qt widgets. These events can either be a simple button click or a text change on a LineEdit or even something like window being hidden and shown."),Object(i.b)("p",null,"In order to do this we need to attach an event listener to the respective widget."),Object(i.b)("p",null,"Technically, the event listener is a NodeJs ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://nodejs.org/api/events.html#events_class_eventemitter"}),"EventEmitter")," instance that listens to events from the underlying Qt widget. The native Qt widget would send all the events to the event emitter in Svelte NodeGui world and the user can essentially subscribe to it."),Object(i.b)("p",null,"Lets see an example to see how this looks in practice."),Object(i.b)("h2",{id:"event-handling"},"Event handling"),Object(i.b)("p",null,"The following example demonstrates how to add a clicked event listener to a button widget."),Object(i.b)("img",{src:"https://github.com/nodegui/react-nodegui/releases/download/assets/events-react.gif",alt:"event example",style:{width:"100%",maxWidth:400}}),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-html"}),'<script lang="ts">\n  import { onMount } from "svelte";\n  let win;\n\n  function onClicked(checked){\n    console.log("the button was clicked", checked);\n  }\n\n  onMount(() => {\n    (window as any).win = win; // Prevent garbage collection.\n    win.nativeView.show();\n    return () => {\n      delete (window as any).win;\n    };\n  });\n<\/script>\n\n<svelte:options namespace="foreign" />\n<window bind:this={win}>\n    <button on:clicked={onClicked} text="Click me"/>\n</window>\n')),Object(i.b)("p",null,"The ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://svelte.dev/docs#on_component_event"}),Object(i.b)("inlineCode",{parentName:"a"},"on:")," directive"),' accepts an event name (e.g. "clicked") and a corresponding event handler function.'),Object(i.b)("p",null,"Internally, Qt widgets in nodegui has two types of events:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Signals: In short these are basically different for different widgets. So a button may have ",Object(i.b)("inlineCode",{parentName:"li"},"clicked")," and ",Object(i.b)("inlineCode",{parentName:"li"},"pressed")," signals, while a LineEdit may have, say, the ",Object(i.b)("inlineCode",{parentName:"li"},"textChanged")," signal."),Object(i.b)("li",{parentName:"ul"},"QEvents: These are common set of events for all the widgets/qobjects in NodeGui world. These are also helpful at times but typically you would end up using signals more than these common events.")),Object(i.b)("p",null,"In Svelte NodeGui you can listen to both Signals and QEvents using the same ",Object(i.b)("inlineCode",{parentName:"p"},"on:")," directive."),Object(i.b)("h3",{id:"how-do-i-know-which-events-are-supported-"},"How do I know which events are supported ?"),Object(i.b)("p",null,"In order to find all the supported events for a widget you can take a look at"),Object(i.b)("h4",{id:"all-signals-for-the-widgets"},"All Signals for the widgets:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nodegui.org/docs/api/generated/globals/#interfaces"}),"https://docs.nodegui.org/docs/api/generated/globals/#interfaces")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(o.a)({parentName:"li"},{href:"https://docs.nodegui.org/docs/api/generated/globals/#type-aliases"}),"https://docs.nodegui.org/docs/api/generated/globals/#type-aliases"))),Object(i.b)("h4",{id:"all-common-qevents-for-the-widgets"},"All common QEvents for the widgets"),Object(i.b)("p",null,"In nodegui all these common QEvents are represented under an enum type: ",Object(i.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.nodegui.org/docs/api/generated/enums/widgeteventtypes"}),"WidgetEventTypes")),Object(i.b)("p",null,"You can subscribe to a QEvent like so:"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),'import React from "react";\nimport {\n  Renderer,\n  Text,\n  Window,\n  useEventHandler\n} from "@nodegui/react-nodegui";\nimport { QLabelSignals, QMouseEvent, WidgetEventTypes } from "@nodegui/nodegui";\n\nconst App = () => {\n  const textHandler = useEventHandler<QLabelSignals>(\n    {\n      MouseMove: (nativeEvt: any) => {\n        const mouseEvt = new QMouseEvent(nativeEvt);\n        console.log("mouseMoved at: ", { x: mouseEvt.x(), y: mouseEvt.y() });\n      },\n      [WidgetEventTypes.MouseButtonPress]: () => {\n        console.log("mouse button was pressed");\n      }\n    },\n    []\n  );\n\n  return (\n    <Window>\n      <Text mouseTracking={true} on={textHandler}>\n        Move your mouse here\n      </Text>\n    </Window>\n  );\n};\n\nRenderer.render(<App />);\n')),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-html"}),'<script lang="ts">\n  import { onMount } from "svelte";\n  import { QLabelSignals, QMouseEvent, WidgetEventTypes } from "@nodegui/nodegui";\n  let win;\n\n  function onMouseMove(checked){\n    const mouseEvt = new QMouseEvent(nativeEvt);\n    console.log("mouseMoved at: ", { x: mouseEvt.x(), y: mouseEvt.y() });\n  }\n  function onMouseButtonPress(checked){\n    console.log("mouse button was pressed");\n  }\n\n  onMount(() => {\n    (window as any).win = win; // Prevent garbage collection.\n    win.nativeView.show();\n    return () => {\n      delete (window as any).win;\n    };\n  });\n<\/script>\n\n<svelte:options namespace="foreign" />\n<window bind:this={win}>\n    \x3c!-- See the WidgetEventTypes interface for the names of all supported events. --\x3e\n    <text\n      mouseTracking={true}\n      on:MouseMove={onMouseMove}\n      on:MouseButtonPress={onMouseButtonPress}\n    >\n      Move your mouse here\n    </text>\n</window>\n')),Object(i.b)("img",{src:"https://github.com/nodegui/react-nodegui/releases/download/assets/qevents.gif",alt:"qevent example",style:{width:"100%",maxWidth:400}}),Object(i.b)("p",null,"Note here that every QEvent handler gives a reference to native QEvent in the handler callback.\nNot all native QEvent wrappers are implemented yet and we might need your help regarding those. Feel free to jump in and contribute to the nodegui core."),Object(i.b)("p",null,"Also you can specify the QEvent type as a regular ",Object(i.b)("inlineCode",{parentName:"p"},"MouseMove")," string or use it directly from the enum ",Object(i.b)("inlineCode",{parentName:"p"},"WidgetEventTypes.MouseMove"),". They both achieve same things."))}d.isMDXComponent=!0}}]);